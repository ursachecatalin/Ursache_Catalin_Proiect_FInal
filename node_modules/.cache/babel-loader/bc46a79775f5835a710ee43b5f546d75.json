{"ast":null,"code":"var _jsxFileName = \"D:\\\\CURS Practica\\\\Ursache_Catalin_Proiect_FInal\\\\src\\\\Components\\\\ExperienceBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../Stylesheets/ExperienceBox.css';\nimport ExperienceBoxAddArea from './ExperienceBoxAddArea';\nimport ExperienceBoxEditArea from './ExperienceBoxEditArea';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ExperienceBox(_ref) {\n  _s();\n\n  let {\n    loggedUser,\n    setLoggedUser\n  } = _ref;\n  const [userExperience, setUserExperience] = useState([]);\n  const [experienceInfoEditable, setExperienceEditable] = useState({\n    state: false,\n    indexToEdit: null\n  });\n  const [dateIsToPresent, setDateIsToPresent] = useState({\n    display: false,\n    value: \"\"\n  });\n  const [cancelExperienceInfoEditable, setCancelExperienceInfoEditable] = useState({\n    display: false,\n    indexToCancel: null\n  }); //states used to check inputs from the user\n\n  const [roleValidity, setRoleValidity] = useState(true);\n  const [employerValidity, setEmployerValidity] = useState(true);\n  const [cityValidity, setCityValidity] = useState(true);\n  const [summaryValidity, setSummaryValidity] = useState(true);\n  const [role, setRole] = useState(\"\");\n  const [employer, setEmployer] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [summary, setSummary] = useState(\"\");\n  const [clear, setClear] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false); //useEffect used to get the experience from the logged user\n\n  useEffect(() => {\n    var loggedUserExperience = loggedUser.user_experience;\n\n    if (loggedUserExperience && loggedUserExperience.length !== 0) {\n      loggedUserExperience.map(experience => {\n        setUserExperience(prevValue => {\n          return [...prevValue, experience];\n        });\n        return 0;\n      });\n    } // eslint-disable-next-line\n\n  }, []); //useEffect used to pass the newUserExperience everytime when an user does opertions in experience box.\n\n  useEffect(() => {\n    setLoggedUser(() => {\n      let newLoggedUser = Object.assign({}, loggedUser);\n      newLoggedUser.user_experience = userExperience;\n      return newLoggedUser;\n    }); // eslint-disable-next-line\n  }, [userExperience]); //useEffect used to switch from empty 'Period to' to the completed one with the data\n  //from the selected item\n\n  useEffect(() => {\n    if (dateIsToPresent.display === false) {\n      var userData = returnInputs(\"simple\");\n      userData.periodTo.value = dateIsToPresent.value;\n    }\n  }, [dateIsToPresent]);\n\n  function returnInputs(returnType) {\n    var userData;\n\n    switch (returnType) {\n      case \"simple\":\n        userData = {\n          role: document.getElementById('experienceBoxRole'),\n          employer: document.getElementById('experienceBoxEmployer'),\n          city: document.getElementById('experienceBoxCity'),\n          periodFrom: document.getElementById('experienceBoxPeriodFrom'),\n          periodTo: document.getElementById('experienceBoxPeriodTo'),\n          summary: document.getElementById('experienceBoxTextarea')\n        };\n        break;\n\n      case \"value\":\n        userData = {\n          role: document.getElementById('experienceBoxRole').value,\n          employer: document.getElementById('experienceBoxEmployer').value,\n          city: document.getElementById('experienceBoxCity').value,\n          periodFrom: document.getElementById('experienceBoxPeriodFrom').value,\n          periodTo: document.getElementById('experienceBoxPeriodTo').value,\n          summary: document.getElementById('experienceBoxTextarea').value\n        };\n        break;\n\n      default:\n        return null;\n    }\n\n    return userData;\n  }\n\n  function handleExperienceClearInputs() {\n    var userData = returnInputs(\"simple\");\n    setRole(\"\");\n    setEmployer(\"\");\n    setCity(\"\");\n    setSummary(\"\");\n    userData.periodFrom.value = \"\";\n    userData.periodTo.value = \"\";\n    setSummary(\"\");\n    setClear(true);\n  }\n\n  function checkForEmptyInputs() {\n    var userData = returnInputs(\"value\");\n    const timeElapsed = Date.now();\n    const today = new Date(timeElapsed);\n    if (roleValidity === false || employerValidity === false || cityValidity === false || userData.periodFrom === \"\" || userData.periodTo === \"\" || userData.summary === \"\") return false;\n    if (userData.periodFrom > userData.periodTo || userData.periodFrom > today.toISOString()) return false;\n    if (userData.periodTo !== \"Present\" && userData.periodTo > today.toISOString()) return false;\n    return true;\n  }\n\n  function handleExperienceAddInputs() {\n    var userData = returnInputs(\"value\");\n    var userExperienceObject = {\n      role: userData.role,\n      employer: userData.employer,\n      city: userData.city,\n      period_from: userData.periodFrom,\n      period_to: userData.periodTo,\n      summary: userData.summary\n    };\n    var checkedInputs = checkForEmptyInputs();\n\n    if (checkedInputs) {\n      setUserExperience(prevValue => {\n        return [...prevValue, userExperienceObject];\n      });\n      handleExperienceClearInputs();\n      setDateIsToPresent({\n        display: false,\n        value: \"\"\n      });\n    }\n  }\n\n  function handleDisplayDescription(indexValue) {\n    var descriptionDivIndex = indexValue.index;\n    var descriptionDiv = document.getElementById(descriptionDivIndex + \"desc\");\n\n    if (descriptionDiv.style.height === \"\") {\n      descriptionDiv.style.height = \"100px\";\n      document.getElementById(descriptionDivIndex + \"_display\").innerHTML = `&#8593;`;\n    } else {\n      document.getElementById(descriptionDivIndex + \"_display\").innerHTML = `&#8595;`;\n      descriptionDiv.style.height = \"\";\n    }\n  }\n\n  function handleDeleteExperience(e) {\n    var indexID = parseInt(e.target.id);\n    var newUserExperience = [];\n\n    if (userExperience.length === 1) {\n      setUserExperience([]);\n    } else {\n      for (var i = 0; i < userExperience.length; i++) {\n        if (i !== indexID) {\n          newUserExperience.push(userExperience[i]);\n        }\n      }\n\n      setUserExperience(newUserExperience);\n    }\n\n    setExperienceEditable({\n      state: false,\n      indexToEdit: 0\n    });\n    handleExperienceClearInputs();\n    setShowDeleteModal(false);\n    setCancelExperienceInfoEditable({\n      display: false,\n      indexToCancel: null\n    });\n\n    for (i = 0; i < userExperience.length; i++) {\n      document.getElementById(i + \"content\").style.backgroundColor = \"#6946c6\";\n      document.getElementById(i + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n    }\n  }\n\n  async function handleEditContent(index) {\n    var userDataToEdit = userExperience[index];\n    var userData = returnInputs(\"simple\");\n    setRole(userDataToEdit.role);\n    setEmployer(userDataToEdit.employer);\n    setCity(userDataToEdit.city);\n    userData.periodFrom.value = userDataToEdit.period_from;\n\n    if (userDataToEdit.period_to === \"Present\") {\n      setDateIsToPresent({\n        display: true,\n        value: 0\n      });\n    } else {\n      setDateIsToPresent({\n        display: false,\n        value: userDataToEdit.period_to\n      });\n    }\n\n    setSummary(userDataToEdit.summary);\n    setExperienceEditable({\n      state: true,\n      indexToEdit: index\n    });\n    setCancelExperienceInfoEditable({\n      display: true,\n      indexToCancel: index\n    });\n\n    for (var i = 0; i < userExperience.length; i++) {\n      if (i === index) {\n        document.getElementById(i + \"content\").style.backgroundColor = \"#beaeeb\";\n        document.getElementById(i + \"contentButtons\").style.backgroundColor = \"#beaeeb\";\n      } else {\n        document.getElementById(i + \"content\").style.backgroundColor = \"#6946c6\";\n        document.getElementById(i + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n      }\n    }\n  }\n\n  function handleExperienceEditInputs() {\n    var userData = returnInputs(\"value\");\n    var userExperienceObject = {\n      role: userData.role,\n      employer: userData.employer,\n      city: userData.city,\n      period_from: userData.periodFrom,\n      period_to: userData.periodTo,\n      summary: userData.summary\n    };\n    var checkedInputs = checkForEmptyInputs();\n\n    if (checkedInputs) {\n      var changedDataUser = [...userExperience];\n      var indexToChange = experienceInfoEditable.indexToEdit;\n      changedDataUser[indexToChange] = userExperienceObject;\n      setUserExperience(changedDataUser);\n      handleExperienceClearInputs();\n      document.getElementById(experienceInfoEditable.indexToEdit + \"content\").style.backgroundColor = \"#6946c6\";\n      document.getElementById(experienceInfoEditable.indexToEdit + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n      setExperienceEditable({\n        state: false,\n        indexToEdit: 0\n      });\n      setCancelExperienceInfoEditable({\n        display: false,\n        indexToCancel: null\n      });\n      setDateIsToPresent({\n        display: false,\n        value: \"\"\n      });\n    }\n  }\n\n  function handleDateToPresent() {\n    dateIsToPresent.display ? setDateIsToPresent({\n      display: false,\n      value: \"\"\n    }) : setDateIsToPresent({\n      display: true,\n      value: \"\"\n    });\n  }\n\n  function handleCancelEdit(indexToCancel) {\n    document.getElementById(indexToCancel + \"content\").style.backgroundColor = \"#6946c6\";\n    document.getElementById(indexToCancel + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n    handleExperienceClearInputs();\n    setCancelExperienceInfoEditable({\n      display: false,\n      indexToCancel: null\n    });\n    setExperienceEditable({\n      state: false,\n      indexToEdit: null\n    });\n    setDateIsToPresent({\n      display: false,\n      value: \"\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"experienceBoxContent\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ComponentTitle\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Experience\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceBoxAddArea, {\n      handleDateToPresent: handleDateToPresent,\n      handleExperienceAddInputs: handleExperienceAddInputs,\n      handleExperienceClearInputs: handleExperienceClearInputs,\n      handleExperienceEditInputs: handleExperienceEditInputs,\n      experienceInfoEditable: experienceInfoEditable,\n      dateIsToPresent: dateIsToPresent,\n      cancelExperienceInfoEditable: cancelExperienceInfoEditable,\n      handleCancelEdit: handleCancelEdit,\n      role: role,\n      setRole: setRole,\n      employer: employer,\n      setEmployer: setEmployer,\n      city: city,\n      setCity: setCity,\n      summary: summary,\n      setSummary: setSummary,\n      roleValidity: roleValidity,\n      setRoleValidity: setRoleValidity,\n      employerValidity: employerValidity,\n      setEmployerValidity: setEmployerValidity,\n      cityValidity: cityValidity,\n      setCityValidity: setCityValidity,\n      summaryValidity: summaryValidity,\n      setSummaryValidity: setSummaryValidity,\n      clear: clear,\n      setClear: setClear\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ExperienceBoxEditArea, {\n      userExperience: userExperience,\n      handleEditContent: handleEditContent,\n      handleDisplayDescription: handleDisplayDescription,\n      handleDeleteExperience: handleDeleteExperience,\n      setShowDeleteModal: setShowDeleteModal,\n      showDeleteModal: showDeleteModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ExperienceBox, \"BUNpIpqnN/yz6fYbJRJgjnDiJwo=\");\n\n_c = ExperienceBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExperienceBox\");","map":{"version":3,"sources":["D:/CURS Practica/Ursache_Catalin_Proiect_FInal/src/Components/ExperienceBox.js"],"names":["React","useState","useEffect","ExperienceBoxAddArea","ExperienceBoxEditArea","ExperienceBox","loggedUser","setLoggedUser","userExperience","setUserExperience","experienceInfoEditable","setExperienceEditable","state","indexToEdit","dateIsToPresent","setDateIsToPresent","display","value","cancelExperienceInfoEditable","setCancelExperienceInfoEditable","indexToCancel","roleValidity","setRoleValidity","employerValidity","setEmployerValidity","cityValidity","setCityValidity","summaryValidity","setSummaryValidity","role","setRole","employer","setEmployer","city","setCity","summary","setSummary","clear","setClear","showDeleteModal","setShowDeleteModal","loggedUserExperience","user_experience","length","map","experience","prevValue","newLoggedUser","Object","assign","userData","returnInputs","periodTo","returnType","document","getElementById","periodFrom","handleExperienceClearInputs","checkForEmptyInputs","timeElapsed","Date","now","today","toISOString","handleExperienceAddInputs","userExperienceObject","period_from","period_to","checkedInputs","handleDisplayDescription","indexValue","descriptionDivIndex","index","descriptionDiv","style","height","innerHTML","handleDeleteExperience","e","indexID","parseInt","target","id","newUserExperience","i","push","backgroundColor","handleEditContent","userDataToEdit","handleExperienceEditInputs","changedDataUser","indexToChange","handleDateToPresent","handleCancelEdit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../Stylesheets/ExperienceBox.css'\nimport ExperienceBoxAddArea from './ExperienceBoxAddArea';\nimport ExperienceBoxEditArea from './ExperienceBoxEditArea';\n\n\nexport default function ExperienceBox({ loggedUser, setLoggedUser }) {\n    const [userExperience, setUserExperience] = useState([]);\n    const [experienceInfoEditable, setExperienceEditable] = useState({ state: false, indexToEdit: null });\n    const [dateIsToPresent, setDateIsToPresent] = useState({ display: false, value: \"\" });\n    const [cancelExperienceInfoEditable, setCancelExperienceInfoEditable] = useState({ display: false, indexToCancel: null })\n    //states used to check inputs from the user\n    const [roleValidity, setRoleValidity] = useState(true)\n    const [employerValidity, setEmployerValidity] = useState(true);\n    const [cityValidity, setCityValidity] = useState(true);\n    const [summaryValidity, setSummaryValidity] = useState(true);\n    const [role, setRole] = useState(\"\");\n    const [employer, setEmployer] = useState(\"\");\n    const [city, setCity] = useState(\"\");\n    const [summary, setSummary] = useState(\"\");\n\n    const [clear, setClear] = useState(false);\n\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\n    //useEffect used to get the experience from the logged user\n    useEffect(() => {\n        var loggedUserExperience = loggedUser.user_experience;\n        if (loggedUserExperience && loggedUserExperience.length !== 0) {\n            loggedUserExperience.map((experience) => {\n                setUserExperience((prevValue) => { return [...prevValue, experience] });\n                return 0;\n            })\n        }\n        // eslint-disable-next-line\n    }, []);\n\n    //useEffect used to pass the newUserExperience everytime when an user does opertions in experience box.\n    useEffect(() => {\n        setLoggedUser(() => {\n            let newLoggedUser = Object.assign({}, loggedUser);\n            newLoggedUser.user_experience = userExperience;\n            return newLoggedUser;\n        })\n        // eslint-disable-next-line\n    }, [userExperience])\n\n    //useEffect used to switch from empty 'Period to' to the completed one with the data\n    //from the selected item\n    useEffect(() => {\n        if (dateIsToPresent.display === false) {\n            var userData = returnInputs(\"simple\");\n            userData.periodTo.value = dateIsToPresent.value;\n        }\n    }, [dateIsToPresent]);\n\n    function returnInputs(returnType) {\n        var userData;\n        switch (returnType) {\n            case \"simple\":\n                userData = {\n                    role: document.getElementById('experienceBoxRole'),\n                    employer: document.getElementById('experienceBoxEmployer'),\n                    city: document.getElementById('experienceBoxCity'),\n                    periodFrom: document.getElementById('experienceBoxPeriodFrom'),\n                    periodTo: document.getElementById('experienceBoxPeriodTo'),\n                    summary: document.getElementById('experienceBoxTextarea')\n                }\n                break;\n            case \"value\":\n                userData = {\n                    role: document.getElementById('experienceBoxRole').value,\n                    employer: document.getElementById('experienceBoxEmployer').value,\n                    city: document.getElementById('experienceBoxCity').value,\n                    periodFrom: document.getElementById('experienceBoxPeriodFrom').value,\n                    periodTo: document.getElementById('experienceBoxPeriodTo').value,\n                    summary: document.getElementById('experienceBoxTextarea').value\n                }\n                break;\n            default:\n                return null;\n        }\n        return userData;\n    }\n\n    function handleExperienceClearInputs() {\n        var userData = returnInputs(\"simple\");\n        setRole(\"\");\n        setEmployer(\"\");\n        setCity(\"\");\n        setSummary(\"\");\n        userData.periodFrom.value = \"\";\n        userData.periodTo.value = \"\";\n        setSummary(\"\");\n        setClear(true);\n    }\n    function checkForEmptyInputs() {\n        var userData = returnInputs(\"value\");\n        const timeElapsed = Date.now();\n        const today = new Date(timeElapsed);\n        if (roleValidity === false || employerValidity === false || cityValidity === false || userData.periodFrom === \"\" || userData.periodTo === \"\" || userData.summary === \"\") return false;\n        if (userData.periodFrom > userData.periodTo || userData.periodFrom > today.toISOString()) return false;\n        if (userData.periodTo !== \"Present\" && userData.periodTo > today.toISOString()) return false;\n        return true;\n    }\n    function handleExperienceAddInputs() {\n        var userData = returnInputs(\"value\");\n        var userExperienceObject = {\n            role: userData.role,\n            employer: userData.employer,\n            city: userData.city,\n            period_from: userData.periodFrom,\n            period_to: userData.periodTo,\n            summary: userData.summary\n        };\n        var checkedInputs = checkForEmptyInputs();\n        if (checkedInputs) {\n            setUserExperience((prevValue) => { return [...prevValue, userExperienceObject] });\n            handleExperienceClearInputs();\n            setDateIsToPresent({ display: false, value: \"\" });\n        }\n    }\n    function handleDisplayDescription(indexValue) {\n        var descriptionDivIndex = indexValue.index;\n        var descriptionDiv = document.getElementById(descriptionDivIndex + \"desc\");\n        if (descriptionDiv.style.height === \"\") {\n            descriptionDiv.style.height = \"100px\";\n            document.getElementById(descriptionDivIndex + \"_display\").innerHTML = `&#8593;`;\n        }\n        else {\n            document.getElementById(descriptionDivIndex + \"_display\").innerHTML = `&#8595;`;\n            descriptionDiv.style.height = \"\";\n        }\n    }\n    function handleDeleteExperience(e) {\n        var indexID = parseInt(e.target.id);\n        var newUserExperience = [];\n        if (userExperience.length === 1) {\n            setUserExperience([]);\n        } else {\n            for (var i = 0; i < userExperience.length; i++) {\n                if (i !== indexID) {\n                    newUserExperience.push(userExperience[i]);\n                }\n            }\n            setUserExperience(newUserExperience);\n        }\n        setExperienceEditable({ state: false, indexToEdit: 0 })\n        handleExperienceClearInputs();\n        setShowDeleteModal(false);\n        setCancelExperienceInfoEditable({ display: false, indexToCancel: null })\n        for (i = 0; i < userExperience.length; i++) {\n            document.getElementById(i + \"content\").style.backgroundColor = \"#6946c6\";\n            document.getElementById(i + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n        }\n    }\n    async function handleEditContent(index) {\n        var userDataToEdit = userExperience[index];\n        var userData = returnInputs(\"simple\");\n        setRole(userDataToEdit.role);\n        setEmployer(userDataToEdit.employer);\n        setCity(userDataToEdit.city);\n        userData.periodFrom.value = userDataToEdit.period_from;\n        if (userDataToEdit.period_to === \"Present\") {\n            setDateIsToPresent({ display: true, value: 0 });\n        } else {\n            setDateIsToPresent({ display: false, value: userDataToEdit.period_to });\n        }\n        setSummary(userDataToEdit.summary);\n        setExperienceEditable({ state: true, indexToEdit: index });\n        setCancelExperienceInfoEditable({ display: true, indexToCancel: index });\n        for (var i = 0; i < userExperience.length; i++) {\n            if (i === index) {\n                document.getElementById(i + \"content\").style.backgroundColor = \"#beaeeb\";\n                document.getElementById(i + \"contentButtons\").style.backgroundColor = \"#beaeeb\";\n            } else {\n                document.getElementById(i + \"content\").style.backgroundColor = \"#6946c6\";\n                document.getElementById(i + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n            }\n        }\n\n    }\n    function handleExperienceEditInputs() {\n        var userData = returnInputs(\"value\");\n        var userExperienceObject = {\n            role: userData.role,\n            employer: userData.employer,\n            city: userData.city,\n            period_from: userData.periodFrom,\n            period_to: userData.periodTo,\n            summary: userData.summary\n        };\n        var checkedInputs = checkForEmptyInputs();\n        if (checkedInputs) {\n            var changedDataUser = [...userExperience];\n            var indexToChange = experienceInfoEditable.indexToEdit;\n            changedDataUser[indexToChange] = userExperienceObject;\n            setUserExperience(changedDataUser);\n            handleExperienceClearInputs();\n            document.getElementById(experienceInfoEditable.indexToEdit + \"content\").style.backgroundColor = \"#6946c6\";\n            document.getElementById(experienceInfoEditable.indexToEdit + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n            setExperienceEditable({ state: false, indexToEdit: 0 })\n            setCancelExperienceInfoEditable({ display: false, indexToCancel: null })\n            setDateIsToPresent({ display: false, value: \"\" });\n        }\n    }\n    function handleDateToPresent() {\n        dateIsToPresent.display ? setDateIsToPresent({ display: false, value: \"\" }) : setDateIsToPresent({ display: true, value: \"\" });\n    }\n    function handleCancelEdit(indexToCancel) {\n        document.getElementById(indexToCancel + \"content\").style.backgroundColor = \"#6946c6\";\n        document.getElementById(indexToCancel + \"contentButtons\").style.backgroundColor = \"#6946c6\";\n        handleExperienceClearInputs();\n        setCancelExperienceInfoEditable({ display: false, indexToCancel: null });\n        setExperienceEditable({ state: false, indexToEdit: null })\n        setDateIsToPresent({ display: false, value: \"\" });\n    }\n    return (\n        <div id=\"experienceBoxContent\">\n        <div className=\"ComponentTitle\">\n            <h1>Experience</h1>\n            </div>\n            <ExperienceBoxAddArea handleDateToPresent={handleDateToPresent}\n                handleExperienceAddInputs={handleExperienceAddInputs}\n                handleExperienceClearInputs={handleExperienceClearInputs}\n                handleExperienceEditInputs={handleExperienceEditInputs}\n                experienceInfoEditable={experienceInfoEditable}\n                dateIsToPresent={dateIsToPresent}\n                cancelExperienceInfoEditable={cancelExperienceInfoEditable}\n                handleCancelEdit={handleCancelEdit}\n                role={role} setRole={setRole} employer={employer} setEmployer={setEmployer}\n                city={city} setCity={setCity} summary={summary} setSummary={setSummary}\n                roleValidity={roleValidity} setRoleValidity={setRoleValidity}\n                employerValidity={employerValidity} setEmployerValidity={setEmployerValidity}\n                cityValidity={cityValidity} setCityValidity={setCityValidity}\n                summaryValidity={summaryValidity} setSummaryValidity={setSummaryValidity}\n                clear={clear} setClear={setClear}\n            />\n            <ExperienceBoxEditArea userExperience={userExperience}\n                handleEditContent={handleEditContent}\n                handleDisplayDescription={handleDisplayDescription}\n                handleDeleteExperience={handleDeleteExperience}\n                setShowDeleteModal={setShowDeleteModal}\n                showDeleteModal={showDeleteModal} />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}